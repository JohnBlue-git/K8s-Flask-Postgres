name: CI with Kubernetes Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}  # Use matrix variable

    strategy:
      matrix: # Use matrix
        # Simplified for only testing ubuntu-latest
        #  and slef-hosted is a real build machine
        os: [ubuntu-latest, [self-hosted, linux, x64]]
        # Multiple (container name "Minikube" conflict)
        #os: [ubuntu-latest, ubuntu-22.04, ubuntu-20.04]

    # for writing to achievements
    permissions:
      actions: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y curl ca-certificates conntrack
          # Install Node.js (if not already in image)
          curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
          apt-get install -y nodejs
          node --version
          npm --version
          # Install Docker CLI (if not already in image)
          apt-get install -y docker.io
          docker --version
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mv kubectl /usr/local/bin/
          kubectl version --client
          # Install Minikube
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          chmod +x minikube-linux-amd64
          mv minikube-linux-amd64 /usr/local/bin/minikube
          minikube version

      # X Exiting due to DRV_AS_ROOT: The "docker" driver should not be used with root privileges.
      # - name: Start Minikube cluster
      #   run: |
      #     # Start Minikube with Docker driver
      #     minikube start --driver=docker --wait=all --nodes=1
      #     # Verify cluster
      #     minikube status
      #     kubectl cluster-info
      #     kubectl get nodes

      - name: Clean up existing Minikube containers
        run: |
          docker rm -f minikube minikube-preload-sidecar || true
          minikube delete || true

      - name: Start Minikube cluster
        run: |
          # Create a non-root user
          useradd -m -s /bin/bash ciuser
          usermod -aG docker ciuser
          # Ensure Docker socket is accessible
          chown ciuser:docker /var/run/docker.sock
          # Run Minikube as non-root user
          su - ciuser -c "minikube start --driver=docker --wait=all --nodes=1 --kubernetes-version=v1.28.0"
          su - ciuser -c "minikube status"
          su - ciuser -c "kubectl cluster-info"
          su - ciuser -c "kubectl get nodes"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: johnbluedocker
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          cd ./web
          docker build -t johnbluedocker/flask-app:latest .
          docker push johnbluedocker/flask-app:latest

      - name: Apply Kubernetes manifests
        run: |
          # Copy kubectl config to root user
          cp -r /home/ciuser/.kube /root/.kube
          # Apply
          kubectl apply -f k8s/postgres-deployment.yaml
          kubectl apply -f k8s/postgres-service.yaml
          kubectl apply -f k8s/flask-deployment.yaml
          kubectl apply -f k8s/flask-service.yaml
          # This command instructs Kubernetes to wait until the flask, postgres deployment reaches the available condition.
          kubectl wait --for=condition=available --timeout=300s deployment/flask
          kubectl wait --for=condition=available --timeout=300s deployment/postgres

      - name: Run unit tests in Flask pod
        # option 1: only continue under all pass case
        # run: |
        #   POD_NAME=$(kubectl get pods -l app=flask -o jsonpath="{.items[0].metadata.name}")
        #   kubectl exec $POD_NAME -- env PYTHONPATH=/app pytest tests/test_app.py --verbose --junitxml=/app/report.xml
        #   if [ $? -eq 0 ]; then
        #     echo "All tests passed, pushing Docker image..."
        #     echo "PUSH_IMAGE=true" >> $GITHUB_ENV
        #   else
        #     echo "Tests failed or partially passed, skipping Docker push."
        #     echo "PUSH_IMAGE=false" >> $GITHUB_ENV
        #     exit 1
        #   fi
        # option 2: test but not necessary to be all pass 
        run: |
          # run test
          POD_NAME=$(kubectl get pods -l app=flask -o jsonpath="{.items[0].metadata.name}")
          kubectl exec $POD_NAME -- env PYTHONPATH=/app pytest tests/test_app.py --verbose --junitxml=/app/report.xml
          TEST_EXIT_CODE=$?
          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "Pytest failed or was interrupted, skipping Docker push."
            exit 1
          fi
          # make sure report.xml
          kubectl cp $POD_NAME:/app/report.xml ./report.xml
          # check test
          python -c '
          import subprocess
          import xml.etree.ElementTree as ET
          tree = ET.parse("report.xml")
          testsuite = tree.getroot()
          failures = int(testsuite.get("failures", 0))
          errors = int(testsuite.get("errors", 0))
          skipped = int(testsuite.get("skipped", 0))
          if failures == 0 and errors == 0 and skipped == 0:
              print("All tests passed, pushing Docker image...")
              # option: using step outputs
              # subprocess.run("echo push_image=true >> $GITHUB_OUTPUT", shell=True, check=True)
              # option: using enviroment variable
              subprocess.run("echo PUSH_IMAGE=true >> $GITHUB_ENV", shell=True, check=True)
          else:
              print(f"Tests partially passed (failures: {failures}, errors: {errors}, skipped: {skipped}), skipping Docker push.")
              # option: using step outputs
              # subprocess.run("echo push_image=false >> $GITHUB_OUTPUT", shell=True, check=True)
              # option: using enviroment variable
              subprocess.run("echo PUSH_IMAGE=false >> $GITHUB_ENV", shell=True, check=True)
          '

      - name: Push Docker image
        # option: usgin step outputs
        # if: ${{ steps.step9.outputs.push_image == 'true' }}
        # run: docker push johnbluedocker/flask-app:stable
        # option: using enviroment variable
        if: ${{ env.PUSH_IMAGE == 'true' }}
        run: docker push johnbluedocker/flask-app:stable

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results
          path: report.xml