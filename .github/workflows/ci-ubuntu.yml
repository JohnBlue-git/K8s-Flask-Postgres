name: CI with Kubernetes Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}  # Use matrix variable

    strategy:
      matrix: # Use matrix
        # Simplified for testing; re-add ubuntu-22.04, ubuntu-20.04 later
        os: [ubuntu-latest]
        # Multiple (container name "Minikube" conflict)
        #os: [ubuntu-latest, ubuntu-22.04, ubuntu-20.04]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y curl ca-certificates conntrack
          # Install Node.js (if not already in image)
          curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
          apt-get install -y nodejs
          node --version
          npm --version
          # Install Docker CLI (if not already in image)
          apt-get install -y docker.io
          docker --version
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mv kubectl /usr/local/bin/
          kubectl version --client
          # Install Minikube
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          chmod +x minikube-linux-amd64
          mv minikube-linux-amd64 /usr/local/bin/minikube
          minikube version

      # X Exiting due to DRV_AS_ROOT: The "docker" driver should not be used with root privileges.
      # - name: Start Minikube cluster
      #   run: |
      #     # Start Minikube with Docker driver
      #     minikube start --driver=docker --wait=all --nodes=1
      #     # Verify cluster
      #     minikube status
      #     kubectl cluster-info
      #     kubectl get nodes

      - name: Clean up existing Minikube containers
        run: |
          docker rm -f minikube minikube-preload-sidecar || true
          minikube delete || true

      - name: Start Minikube cluster
        run: |
          # Create a non-root user
          useradd -m -s /bin/bash ciuser
          usermod -aG docker ciuser
          # Ensure Docker socket is accessible
          chown ciuser:docker /var/run/docker.sock
          # Run Minikube as non-root user
          su - ciuser -c "minikube start --driver=docker --wait=all --nodes=1 --kubernetes-version=v1.28.0"
          su - ciuser -c "minikube status"
          su - ciuser -c "kubectl cluster-info"
          su - ciuser -c "kubectl get nodes"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: johnbluedocker
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          cd ./web
          docker build -t johnbluedocker/flask-app:latest .
          docker push johnbluedocker/flask-app:latest

      # - name: Apply Kubernetes manifests
      #   run: |
      #     # Copy kubectl config to root user
      #     cp -r /home/ciuser/.kube /root/.kube
      #     # Apply
      #     kubectl apply -f k8s/postgres-deployment.yaml
      #     kubectl apply -f k8s/postgres-service.yaml
      #     kubectl apply -f k8s/flask-deployment.yaml
      #     kubectl apply -f k8s/flask-service.yaml
      #     kubectl wait --for=condition=available --timeout=300s deployment/flask-deployment
      #     kubectl wait --for=condition=available --timeout=300s deployment/postgres-deployment

      # - name: Run unit tests in Flask pod
      #   run: |
      #     POD_NAME=$(kubectl get pods -l app=flask -o jsonpath="{.items[0].metadata.name}")
      #     kubectl exec $POD_NAME -- env PYTHONPATH=/app pytest tests/test_app.py --verbose --junitxml=report.xml

      # - name: Upload test results
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: pytest-results
      #     path: report.xml